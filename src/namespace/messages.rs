use std::io::Write;

use serde::{Deserialize, Serialize};
use specta::Type;

#[derive(Type, Clone, Debug, Deserialize)]
#[serde(tag = "type")]
pub enum ClientMessage {
    Set { store: String, value: String },
    Get { store: String },

    Subscribe { store: String, initial: String },
    Unsubscribe { store: String },
}

#[derive(Type, Clone, Debug, Serialize)]
#[serde(tag = "type")]
pub enum ServerMessage {
    Update { store: String, value: String },
}

macro_rules! specta_buffer {
    {$($types:ty)|* ,$s:expr} => {
        {
            let mut buffer = String::from("/** this file is automatically generated, do not edit **/\n\n");
            $(buffer += &specta::ts::export::<$types>(&Default::default()).expect("Failed to export types"); buffer += ";\n";)*
            buffer += $s;
            buffer
        }
    };
}

pub fn export_types(path: &str) {
    let path = std::path::Path::new(path);

    if path.exists() {
        std::fs::remove_file(path).expect("Failed to remove old types");
    }

    let definitions = specta_buffer! {
        ServerMessage | ClientMessage,
        r#"
export type ClientMessageTypes = ClientMessage["type"];
export type ServerMessageTypes = ServerMessage["type"];
export type ServerMessageMap<T extends ServerMessageTypes> = Omit<Extract<ServerMessage, { type: T }>, 'type'>;
export type ClientMessageMap<T extends ClientMessageTypes> = Omit<Extract<ClientMessage, { type: T }>, 'type'>;
"#
    };

    let mut file = std::fs::File::create(path).expect("Failed to create types");
    file.write_all(definitions.as_bytes())
        .expect("Failed to write to types");

    println!("Exported types to types");
}
